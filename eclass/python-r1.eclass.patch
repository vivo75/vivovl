--- python-r1.eclass.orig	2018-03-10 03:23:55.359620995 -0000
+++ python-r1.eclass	2018-03-10 03:35:39.280862472 -0000
@@ -53,6 +53,34 @@
 
 fi
 
+# @ECLASS-VARIABLE: PYTHON_ENABLED_IF_SOURCE
+# @DESCRIPTION:
+# This variable work in only if also ${PYTHON_ENABLE_IF} has a value
+# when "source" python version is found but "dest" is not add 
+# ${PYTHON_ENABLE_IF} to ${PYTHON_COMPAT}
+# Be warned of cache incoherency
+#
+# Example use:
+# @CODE
+# PYTHON_ENABLED_IF_SOURCE=python3_5
+# @CODE
+
+# @ECLASS-VARIABLE: PYTHON_ENABLE_IF
+# @DESCRIPTION:
+# See description for ${PYTHON_ENABLED_IF_SOURCE}
+#
+# Example use:
+# @CODE
+# PYTHON_ENABLE_IF=python3_6
+# @CODE
+
+: ${PYTHON_ENABLED_IF_SOURCE:=python3_6}
+: ${PYTHON_ENABLE_IF:=python3_7}
+[[ -n ${PYTHON_ENABLED_IF_SOURCE} && -n ${PYTHON_ENABLE_IF} ]] \
+&& [[ ${PYTHON_COMPAT[@]/${PYTHON_ENABLED_IF_SOURCE}} != ${PYTHON_COMPAT[@]} ]] \
+&& [[ ${PYTHON_COMPAT[@]/${PYTHON_ENABLE_IF}} == ${PYTHON_COMPAT[@]} ]] \
+&& PYTHON_COMPAT+=( ${PYTHON_ENABLE_IF} )
+
 # @ECLASS-VARIABLE: PYTHON_COMPAT
 # @REQUIRED
 # @DESCRIPTION:
@@ -70,25 +98,6 @@
 # PYTHON_COMPAT=( python2_7 python3_{3,4} )
 # @CODE
 
-# @ECLASS-VARIABLE: PYTHON_COMPAT_OVERRIDE
-# @INTERNAL
-# @DESCRIPTION:
-# This variable can be used when working with ebuilds to override
-# the in-ebuild PYTHON_COMPAT. It is a string listing all
-# the implementations which package will be built for. It need be
-# specified in the calling environment, and not in ebuilds.
-#
-# It should be noted that in order to preserve metadata immutability,
-# PYTHON_COMPAT_OVERRIDE does not affect IUSE nor dependencies.
-# The state of PYTHON_TARGETS is ignored, and all the implementations
-# in PYTHON_COMPAT_OVERRIDE are built. Dependencies need to be satisfied
-# manually.
-#
-# Example:
-# @CODE
-# PYTHON_COMPAT_OVERRIDE='pypy python3_3' emerge -1v dev-python/foo
-# @CODE
-
 # @ECLASS-VARIABLE: PYTHON_REQ_USE
 # @DEFAULT_UNSET
 # @DESCRIPTION:
@@ -242,25 +251,10 @@
 # @FUNCTION: _python_validate_useflags
 # @INTERNAL
 # @DESCRIPTION:
-# Enforce the proper setting of PYTHON_TARGETS, if PYTHON_COMPAT_OVERRIDE
-# is not in effect. If it is, just warn that the flags will be ignored.
+# Enforce the proper setting of PYTHON_TARGETS.
 _python_validate_useflags() {
 	debug-print-function ${FUNCNAME} "${@}"
 
-	if [[ ${PYTHON_COMPAT_OVERRIDE} ]]; then
-		if [[ ! ${_PYTHON_COMPAT_OVERRIDE_WARNED} ]]; then
-			ewarn "WARNING: PYTHON_COMPAT_OVERRIDE in effect. The following Python"
-			ewarn "implementations will be enabled:"
-			ewarn
-			ewarn "	${PYTHON_COMPAT_OVERRIDE}"
-			ewarn
-			ewarn "Dependencies won't be satisfied, and PYTHON_TARGETS will be ignored."
-			_PYTHON_COMPAT_OVERRIDE_WARNED=1
-		fi
-		# we do not use flags with PCO
-		return
-	fi
-
 	local i
 
 	for i in "${_PYTHON_SUPPORTED_IMPLS[@]}"; do
@@ -587,11 +581,6 @@
 _python_obtain_impls() {
 	_python_validate_useflags
 
-	if [[ ${PYTHON_COMPAT_OVERRIDE} ]]; then
-		MULTIBUILD_VARIANTS=( ${PYTHON_COMPAT_OVERRIDE} )
-		return
-	fi
-
 	MULTIBUILD_VARIANTS=()
 
 	local impl
@@ -711,9 +700,6 @@
 
 	_python_validate_useflags
 	local pycompat=( "${PYTHON_COMPAT[@]}" )
-	if [[ ${PYTHON_COMPAT_OVERRIDE} ]]; then
-		pycompat=( ${PYTHON_COMPAT_OVERRIDE} )
-	fi
 
 	local has_check_deps
 	declare -f python_check_deps >/dev/null && has_check_deps=1
@@ -728,7 +714,7 @@
 
 		# match USE flags only if override is not in effect
 		# and python_check_deps() is not defined
-		if [[ ! ${PYTHON_COMPAT_OVERRIDE} && ! ${has_check_deps} ]]; then
+		if [[ ! ${has_check_deps} ]]; then
 			use "python_targets_${impl}" || continue
 		fi
 
